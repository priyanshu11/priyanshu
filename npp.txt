TCP/IP
================================
tcps.c

#include<sys/types.h> 
#include<sys/socket.h> 
#include<netinet/in.h> 
#include<netdb.h> 
#include<arpa/inet.h> 
#include<string.h>
#include<stdio.h> 
int main(int asrgc,char*argv[]) 
{ 
int bd,sd,ad; 
char buff[1024]; 
struct sockaddr_in cliaddr,servaddr; 
socklen_t clilen; 
clilen=sizeof(cliaddr); 
bzero(&servaddr,sizeof(servaddr)); 
servaddr.sin_family=AF_INET; 
servaddr.sin_addr.s_addr=htonl(INADDR_ANY); 
servaddr.sin_port=htons(1999);  
sd=socket(AF_INET,SOCK_STREAM,0); 
bd=bind(sd,(struct sockaddr*)&servaddr,sizeof(servaddr));
listen(sd,5); 
printf("Server is running….\n");    
ad=accept(sd,(struct sockaddr*)&cliaddr,&clilen); 
while(1) 
{ 
bzero(&buff,sizeof(buff));
    recv(ad,buff,sizeof(buff),0); 
    printf("Message received is %s\n",buff); 
} 
} 


tcpc.c

#include<stdio.h>
#include<string.h> 
#include<string.h> 
#include<sys/socket.h> 
#include<sys/types.h> 
#include<unistd.h> 
#include<netinet/in.h> 
#include<netdb.h> 
#include<arpa/inet.h> 
int main(int argc,char * argv[]) 
{ 
int cd,sd,ad; 
char buff[1024]; 
struct sockaddr_in cliaddr,servaddr; 
struct hostent *h;   
h=gethostbyname(argv[1]); 
bzero(&servaddr,sizeof(servaddr));
servaddr.sin_family=AF_INET; 
memcpy((char *)&servaddr.sin_addr.s_addr,h->h_addr_list[0],h->h_length); 
servaddr.sin_port = htons(1999);
sd = socket(AF_INET,SOCK_STREAM,0); 
cd=connect(sd,(struct sockaddr*)&servaddr,sizeof(servaddr)); 
while(1) 
{ 
printf("Enter the message: \n"); 
 fgets(buff,100,stdin); 
send(sd,buff,sizeof(buff)+1,0); 
printf("\n Data Sent "); 
printf("%s",buff); 
} 
}
=================================
ftps.c

#include<stdio.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<string.h>
#include<stdlib.h>
#include<sys/socket.h>

int main()
{
int s=socket(AF_INET,SOCK_STREAM,0);
struct sockaddr_in sadd;
sadd.sin_family=AF_INET;
sadd.sin_addr.s_addr=htonl(INADDR_ANY);
sadd.sin_port=htons(1997);
socklen_t slen=sizeof(sadd);
bind(s,(struct sockaddr*)&sadd,slen);
printf("Server Connected!\n");
listen(s,1);
struct sockaddr_in cadd;
socklen_t clen=sizeof(cadd);
int a=accept(s,(struct sockaddr*)&cadd,&clen);
printf("Client Connected!\n");
while(1)
{
char b1[1024];
recv(a,b1,sizeof(b1),0);
FILE* f=fopen(b1,"r");
char b2[1024];
fread(b2,sizeof(b2),1,f);
fclose(f);
send(a,b2,sizeof(b2),0);
printf("File Sent!\n");
}
close(s);
}


ftpc.c

#include<stdio.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<string.h>
#include<stdlib.h>
#include<sys/socket.h>

int main()
{
int s=socket(AF_INET,SOCK_STREAM,0);
struct sockaddr_in sadd;
sadd.sin_family=AF_INET;
sadd.sin_addr.s_addr=inet_addr("127.0.0.1");
sadd.sin_port=htons(1997);
socklen_t slen=sizeof(sadd);
connect(s,(struct sockaddr*)&sadd,slen);
while(1)
{
printf("Enter File Name : \n");
char b1[1024];
scanf("%s",b1);
send(s,b1,strlen(b1)+1,0);
char b2[1024];
recv(s,b2,sizeof(b2),0);
printf("File :%s",b2);
}
close(s);
}

=================================
fulldups.c

#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<unistd.h>

int main(int argc,char* argv[]){
	int s=socket(AF_INET,SOCK_STREAM,0);
	struct sockaddr_in sadd;
	sadd.sin_family=AF_INET;
	sadd.sin_addr.s_addr=htonl(INADDR_ANY);
	sadd.sin_port=htons(1999);
	socklen_t slen=sizeof(sadd);
	bind(s,(struct sockaddr*)&sadd,slen);
	printf("Server connected\n");
	listen(s,1);
	struct sockaddr_in cadd;
	socklen_t clen=sizeof(cadd);
	int a=accept(s,(struct sockaddr*)&cadd,&clen);
	printf("Client connected!\n");
	char b[1024],m[1024];
	pid_t cpid;
	cpid=fork();
	if(cpid==0)
	{
		while(1)
		{
			recv(a,b,sizeof(b),0);
			printf("\nMessage : %s",b);
		}
	}
	else
	{
		while(1)
		{
			printf("\nEnter a Message : ");
			fgets(m,sizeof(m),stdin);
			send(a,m,sizeof(m),0);
			printf("Message sent!\n");
		}
	}
	close(s);
}


fulldupc.c

#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<unistd.h>

int main(int argc,char* argv[]){
	int s=socket(AF_INET,SOCK_STREAM,0);
	struct sockaddr_in sadd;
	sadd.sin_family=AF_INET;
	sadd.sin_addr.s_addr=inet_addr("127.0.0.1");
	sadd.sin_port=htons(1999);
	socklen_t slen=sizeof(sadd);
	connect(s,(struct sockaddr*)&sadd,slen);
	char b[1024],m[1024];
	pid_t cpid;
	cpid=fork();
	if(cpid==0)
	{
		while(1)
		{
			printf("\nEnter a Message : ");
			fgets(b,sizeof(b),stdin);
			send(s,b,sizeof(b),0);
			printf("Message sent!\n");
		}
	}
	else
	{
		while(1)
		{
			recv(s,m,sizeof(m),0);
			printf("\nMessage : %s",m);
		}
	}
	close(s);
}

==================================
dayts.c

#include<time.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<unistd.h>
#include<stdio.h>
#include<string.h>
#include<netinet/in.h>
#include<netdb.h>
int main(int argc,char *argv[])
{
int sd,ad;
char buff[1024];
struct sockaddr_in servaddr,cliaddr;
time_t t1;
bzero(&servaddr,sizeof(servaddr));
	servaddr.sin_family=AF_INET;
servaddr.sin_addr.s_addr=htonl(INADDR_ANY);
servaddr.sin_port=htons(1507);
sd=socket(AF_INET,SOCK_STREAM,0);
bind(sd,(struct sockaddr*)&servaddr,sizeof(servaddr));
listen(sd,5);
printf("Server is running…\n");
  ad=accept(sd,(struct sockaddr *)NULL,NULL);
  while(1)
  {
  	 bzero(&buff,sizeof(buff));
	 t1=time(NULL); 			        				snprintf(buff,sizeof(buff),"%24s\r\n",ctime(&t1));
      	send(ad,buff,sizeof(buff),0);
    } 
}


daytc.c

#include<stdio.h>
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netdb.h>
#include<netinet/in.h>
#include<unistd.h>
#include<time.h>
int main(int argc,char *argv[])
{
int sd,ad;
char buff[1024];
struct sockaddr_in cliaddr,servaddr;
struct hostent *h;
h=gethostbyname(argv[1]);
bzero(&servaddr,sizeof(servaddr));
servaddr.sin_family=AF_INET;
memcpy((char*)&servaddr.sin_addr.s_addr,h->h_addr_list[0],h->h_length);
servaddr.sin_port=htons(1507);  
sd=socket(AF_INET,SOCK_STREAM,0);
	connect(sd,(struct sockaddr*)&servaddr,sizeof(servaddr));
recv(sd,buff,sizeof(buff),0);
printf("Day time of server is: %s\n",buff);
}

=================================
halfdups.c

#include<sys/types.h>
#include<stdio.h>
#include<string.h>
#include<netdb.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<unistd.h>
#include<netinet/in.h>
int main(int argc,char *argv[])
{
int n,sd,ad;
struct sockaddr_in servaddr,cliaddr;
socklen_t clilen,servlen;
char buff[10000],buff1[10000];
bzero(&servaddr,sizeof(servaddr));
	servaddr.sin_family=AF_INET;
	servaddr.sin_addr.s_addr=htonl(INADDR_ANY);
	servaddr.sin_port=htons(5000); 
sd=socket(AF_INET,SOCK_STREAM,0);
	bind(sd,(struct sockaddr*)&servaddr,sizeof(servaddr));
	listen(sd,5);
	printf("%s\n","server is running…");
	ad=accept(sd,(struct sockaddr*)&cliaddr,&clilen);
	while(1)
	{
		bzero(&buff,sizeof(buff));
		recv(ad,buff,sizeof(buff),0);
		
		printf("Receive from the client:%s\n",buff);
		n=1;
		while(n==1)
		{
			bzero(&buff1,sizeof(buff1));
			printf("%s\n","Enter the input data:");
			fgets(buff1,10000,stdin);
			send(ad,buff1,strlen(buff1)+1,0);
			printf("%s\n","Data sent");
			n=n+1;
		}
	}
	return 0;
}


halfdupc.c

#include<sys/types.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<netinet/in.h>
#include<unistd.h>
#include<stdio.h>
#include<string.h>
#include<netdb.h>
int main(int argc,char *argv[])
{
	int n,sd,cd;
	struct sockaddr_in servaddr,cliaddr;
	socklen_t servlen,clilen;
	char buff[10000],buff1[10000];
	bzero(&servaddr,sizeof(servaddr));
	servaddr.sin_family=AF_INET;
	servaddr.sin_addr.s_addr=inet_addr(argv[1]);
	servaddr.sin_port=htons(5000);
	sd=socket(AF_INET,SOCK_STREAM,0);
	cd=connect(sd,(struct sockaddr*)&servaddr,sizeof(servaddr));
	while(1)
	{
		bzero(&buff,sizeof(buff));
		printf("%s\n","Enter the input data:");
		fgets(buff,10000,stdin);
		send(sd,buff,strlen(buff)+1,0);
		printf("%s\n","Data sent");
		n=1;
		while(n==1)
		{
			bzero(&buff1,sizeof(buff1));
			recv(sd,buff1,sizeof(buff1),0);
			printf("Received from the server:%s\n",buff1);
			n=n+1;
		}
	}
	return 0;
}
==================================================
udpserver.c

#include<stdio.h>	//printf
#include<string.h> //memset
#include<stdlib.h> //exit(0);
#include<arpa/inet.h>
#include<sys/socket.h>
#define BUFLEN 512	//Max length of buffer
#define PORT 8888	//The port on which to listen for incoming data
void die(char *s)
{
	perror(s);
	exit(1);
}
int main(void)
{
	struct sockaddr_in si_me, si_other;
	
	int s, i, slen = sizeof(si_other) , recv_len;
	char buf[BUFLEN];
	
	//create a UDP socket
	if ((s=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1)
	{
		die("socket");
	}
	
	// zero out the structure
	memset((char *) &si_me, 0, sizeof(si_me));
	
	si_me.sin_family = AF_INET;
	si_me.sin_port = htons(PORT);
	si_me.sin_addr.s_addr = htonl(INADDR_ANY);
	
	//bind socket to port
	if( bind(s , (struct sockaddr*)&si_me, sizeof(si_me) ) == -1)
	{
		die("bind");
	}
	
	//keep listening for data
	while(1)
	{
		printf("Waiting for data...");
		fflush(stdout);
		
		//try to receive some data, this is a blocking call
		if ((recv_len = recvfrom(s, buf, BUFLEN, 0, (struct sockaddr *) &si_other, &slen)) == -1)
		{
			die("recvfrom()");
		}
		
		//print details of the client/peer and the data received
		printf("Received packet from %s:%d\n", inet_ntoa(si_other.sin_addr), ntohs(si_other.sin_port));
		printf("Data: %s\n" , buf);
		
		//now reply the client with the same data
		if (sendto(s, buf, recv_len, 0, (struct sockaddr*) &si_other, slen) == -1)
		{
			die("sendto()");
		}
	}

	close(s);
	return 0;
}


udpclient.c

#include<stdio.h>	//printf
#include<string.h> //memset
#include<stdlib.h> //exit(0);
#include<arpa/inet.h>
#include<sys/socket.h>

#define SERVER "127.0.0.1"
#define BUFLEN 512	//Max length of buffer
#define PORT 8888	//The port on which to send data

void die(char *s)
{
	perror(s);
	exit(1);
}

int main(void)
{
	struct sockaddr_in si_other;
	int s, i, slen=sizeof(si_other);
	char buf[BUFLEN];
	char message[BUFLEN];

	if ( (s=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1)
	{
		die("socket");
	}

	memset((char *) &si_other, 0, sizeof(si_other));
	si_other.sin_family = AF_INET;
	si_other.sin_port = htons(PORT);
	
	if (inet_aton(SERVER , &si_other.sin_addr) == 0) 
	{
		fprintf(stderr, "inet_aton() failed\n");
		exit(1);
	}

	while(1)
	{
		printf("Enter message : ");
		gets(message);
		
		//send the message
		if (sendto(s, message, strlen(message) , 0 , (struct sockaddr *) &si_other, slen)==-1)
		{
			die("sendto()");
		}
		
		//receive a reply and print it
		//clear the buffer by filling null, it might have previously received data
		memset(buf,'\0', BUFLEN);
		//try to receive some data, this is a blocking call
		if (recvfrom(s, buf, BUFLEN, 0, (struct sockaddr *) &si_other, &slen) == -1)
		{
			die("recvfrom()");
		}
		
		puts(buf);
	}

	close(s);
	return 0;
}
